#!/bin/bash

# This script takes care of syncing the project dependencies in pyproject.toml
# with the requirements file generated by pip freeze.

# It assumes that the user is using a virtual environment to manage the project dependencies.

# Temporary file to hold the requirements
REQUIREMENTS_FILE="requirements.txt"

# Generate the requirements file using pip freeze
pip freeze > "$REQUIREMENTS_FILE"

# Loop through each package in the requirements file
while IFS= read -r line; do
    # Extract package name and version
    package_name=$(echo "$line" | cut -d'=' -f1)
    package_version=$(echo "$line" | cut -d'=' -f3)

    # Check if the package is already in pyproject.toml
    if grep -q "^\s*$package_name\s*=" pyproject.toml; then
        # If it exists, update the version if needed
        current_version=$(grep "^\s*$package_name\s*=" pyproject.toml | cut -d'=' -f2 | tr -d ' "')
        if [ "$current_version" != "^$package_version" ]; then
            echo "Updating $package_name from $current_version to ^$package_version in pyproject.toml"
            # Use sed to update the version in pyproject.toml
            sed -i.bak "s/^\s*$package_name\s*=\s*\".*\"/$package_name = \"^$package_version\"/" pyproject.toml
        else
            echo "$package_name is already up to date."
        fi
    else
        # If it doesn't exist, add it to the dependencies section
        echo "Adding $package_name to pyproject.toml"
        # Append the new dependency to the dependencies section
        sed -i.bak "/\[tool.poetry.dependencies\]/a $package_name = \"^$package_version\"" pyproject.toml
    fi
done < "$REQUIREMENTS_FILE"

# Clean up the temporary requirements file
rm "$REQUIREMENTS_FILE"

# Commit the changes to pyproject.toml
git add pyproject.toml
git commit -m "chore: update main project dependencies"

echo "Syncing complete."